apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "bytesafe.fullname" . }}
  labels:
    {{- include "bytesafe.labels" . | nindent 4 }}
{{- if .Values.statefulSet.labels }}
{{ toYaml .Values.statefulSet.labels | indent 4 }}
{{- end }}
{{- if .Values.statefulSet.annotations }}
  annotations:
{{ toYaml .Values.statefulSet.annotations | indent 4 }}
{{- end }}
spec:
  selector:
    matchLabels:
    {{- include "bytesafe.selectorLabels" . | nindent 6 }}
  replicas: {{.Values.replicaCount}}
  template:
    metadata:
      labels:
        app: {{ template "bytesafe.fullname" . }}
    {{- if .Values.pod.labels }}
{{ toYaml .Values.pod.labels | indent 8 }}
{{- end }}
{{- if .Values.pod.annotations }}
      annotations:
{{ toYaml .Values.pod.annotations | indent 8 }}
{{- end }}
    spec:
      volumes:
      {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: bytesafe-data
          persistentVolumeClaim:
      {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
      {{- end }}
      {{- else if .Values.persistence.enabled }}
        - name: bytesafe-data
          persistentVolumeClaim:
            claimName: {{ template "bytesafe.fullname" . }}-data
      {{- end }}
      volumes:
        - name: bytesafe-tmp
          emptyDir: {}
      containers:
        - name: bytesafe-ce
          image: {{.Values.image.repository}}:{{.Values.image.tag}}
          env:
            - name: DATA_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: DATA_ENCRYPTION_KEY
                  
            {{- if and .Values.redis.enabled .Values.redis.auth.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.auth.existingSecret }}
                  key: {{ .Values.redis.auth.existingSecretPasswordKey }}
            {{- end }}
            {{- if and .Values.redis.enabled .Values.redis.auth.password }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: REDIS_PASSWORD
            {{- end}}
            {{- if and .Values.externalRedis.enabled .Values.externalRedis.existingSecret }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalRedis.existingSecret }}
                  key: {{ .Values.externalRedis.existingSecretPasswordKey }}
            {{- end }}
            {{- if and .Values.externalRedis.enabled .Values.externalRedis.password }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: REDIS_PASSWORD
            {{- end}}
              
            {{- if and .Values.postgresql.enabled .Values.postgresql.auth.existingSecret }}
            - name: DB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: DB_ADMIN_PASSWORD
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.auth.existingSecret }}
                  key: DB_PASSWORD
            {{- end }}
            {{- if and .Values.postgresql.enabled .Values.postgresql.auth.password }}
            - name: DB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: DB_ADMIN_PASSWORD
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: DB_PASSWORD
            {{- end}}
            {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.existingSecret }}
            - name: DB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: DB_ADMIN_PASSWORD
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalDatabase.existingSecret }}
                  key: DB_PASSWORD
            {{- end }}
            {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.password }}
            - name: DB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: DB_ADMIN_PASSWORD
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: DB_PASSWORD
            {{- end}}
            
            {{- if .Values.smtp.enabled }}
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bytesafe-secrets
                  key: SMTP_PASSWORD
            {{- end}}
          envFrom:
            - configMapRef:
                name: bytesafe-config
          args: ["--setupdb"]
          ports:
            - containerPort: 8081
              name: web
          volumeMounts:
            - name: bytesafe-tmp
              mountPath: /tmp
            {{- if .Values.persistence.enabled }}
            - name: bytesafe-data
              mountPath: /var/lib/bytesafe/blobs
            {{- end }}
          livenessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ping
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10